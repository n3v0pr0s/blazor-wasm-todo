@using blazor_wasm_todo.DTO
@using blazor_wasm_todo.Services.Interfaces

@inject IBoardService boardService
@inject NavigationManager navigationManager


<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Доски</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

@if (boards != null)
{
<div class="@NavMenuCssClass">
    <div class="input-group p-3">
        <input type="text" class="form-control" placeholder="Введите название..." @bind-value="@name">
        <div class="input-group-append">
            <button class="btn btn-success" type="button" @onclick="AddBoard">
                <span class="oi oi-plus" aria-hidden="true"></span>
            </button>
        </div>
    </div>


    <ul class="nav flex-column">
        @foreach (var board in boards)
            {
        <li class="nav-item px-3">
            <div class="d-flex justify-content-between align-items-center">
                <NavLink class="nav-link" href="@($"/notes/{board.id}")" @onclick="ToggleNavMenu">
                    <span class="oi oi-list" aria-hidden="true"></span> @board.name
                </NavLink>
                <button class="btn btn-secondary" @onclick="()=>RemoveBoard(board.id)">&times;</button>
            </div>
        </li>
        }
    </ul>
</div>
}


@code {
    private string name;
    private List<Board> boards;

    private bool collapseNavMenu = true;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        //wtf this called twice???
        boards = (await boardService.GetBoards()).ToList();
    }

    private async Task AddBoard()
    {
        if (!string.IsNullOrWhiteSpace(name))
        {
            var newBoard = new Board(name);
            await boardService.AddBoard(newBoard);

            name = null;
            boards = (await boardService.GetBoards()).ToList();
        }
    }

    private async Task RemoveBoard(int id)
    {
        await boardService.RemoveBoard(id);
        boards = (await boardService.GetBoards()).ToList();

        //hardcode
        if (navigationManager.Uri.EndsWith($"notes/{id}"))
            navigationManager.NavigateTo("/notFound");

    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
