@using blazor_wasm_todo.Components
@using blazor_wasm_todo.DTO
@using blazor_wasm_todo.Services.Interfaces

@page "/notes/{BoardId}"

@inject INoteService noteService


<div class="container">
    @if (notes == null)
    {
        <div class="d-flex justify-content-center align-items-center m-5">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <h2>Список дел</h2>
        <div class="input-group mb-3">
            <input type="text" class="form-control" placeholder="Введите текст заметки..." @bind-value="@title">
            <div class="input-group-append">
                <button class="btn btn-secondary" type="button" @onclick="Add">Добавить</button>
            </div>
        </div>
        <div>
            @foreach (var note in notes.OrderBy(x => x.is_done).ThenByDescending(x => x.create_datetime))
            {
                <NoteCard Note="@note" OnRemoved="Remove" />
            }
        </div>
        @if (notes.Count > 0)
        {
            <button class="btn btn-danger" @onclick="RemoveAll">Очистить все</button>
        }
    }
</div>

@code{
    private string title;
    private List<Note> notes;

    [Parameter]
    public string BoardId { get; set; }
    public int Id => int.Parse(BoardId);


    protected override async Task OnParametersSetAsync()
    {
        notes = null;
        notes = (await noteService.GetNotesByBoardId(Id)).ToList();
    }

    private async Task Add()
    {
        if (!string.IsNullOrWhiteSpace(title))
        {
            var newNote = new Note(title, Id);
            await noteService.AddNote(newNote);

            title = null;
            notes.Add(newNote);
        }
    }

    private async Task Remove(int id)
    {
        await noteService.RemoveNote(id);

        var note = notes.FirstOrDefault(x => x.id == id);
        notes.Remove(note);
    }

    private async Task RemoveAll()
    {
        await noteService.RemoveAllNotesByBoardId(Id);

        notes.Clear();
    }
}
